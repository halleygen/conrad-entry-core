{# Stencil #}

import Foundation

public protocol PartialMergable {
    static func empty() -> Self
    mutating func merge(from other: Self)
}

public protocol MutationRequest {
    init(keyAndValues: [String: Any])
}

{% for type in types.implementing.ShipmentAutogen %}
// MARK: - {{ type.name|replace:"Template","" }}

// MARK: Protocol

public protocol {{ type.name|replace:"Template","Properties" }} {
{% for variable in type.storedVariables|!annotated:"skipCreationRequest" %}
    var {{ variable.name }}: {{ variable.typeName }} { get }
{% endfor %}
}

public protocol {{ type.name|replace:"Template","PartialProperties" }} {
{% for variable in type.storedVariables|!annotated:"skipMutationRequest" %}
    var {{ variable.name }}: {{ variable.typeName }}? { get }
{% endfor %}
}

// MARK: CreationRequest

public struct {{ type.name|replace:"Template","CreationRequest"|replace:"Details","" }}: {{ type.name|replace:"Template","Properties" }}, Codable, Hashable {
{% for variable in type.storedVariables|!annotated:"skipCreationRequest" %}
    public var {{ variable.name }}: {{ variable.typeName }} 
{% endfor %}

    public init(
    {% for variable in type.storedVariables|!annotated:"skipCreationRequest" %}
        {{ variable.name }}: {{ variable.typeName }}{% if not forloop.last %}, {% endif %}
    {% endfor %}
    ) {
    {% for variable in type.storedVariables|!annotated:"skipCreationRequest" %}
        self.{{ variable.name }} = {{ variable.name }}
    {% endfor %}
    }

    public init?(mutationRequest: {{ type.name|replace:"Template","MutationRequest" }}) {
        guard
        {% for variable in type.storedVariables|!annotated:"skipCreationRequest" %}
            let {{ variable.name }} = mutationRequest.{{ variable.name }}{% if not forloop.last %}, {% endif %}
        {% endfor %}
        else {
            return nil 
        }

    {% for variable in type.storedVariables|!annotated:"skipCreationRequest" %}
        self.{{ variable.name }} = {{ variable.name }}
    {% endfor %}
    }
}

// MARK: MutationRequest

public struct {{ type.name|replace:"Template","MutationRequest" }}: {{ type.name|replace:"Template","PartialProperties" }}, PartialMergable, MutationRequest, Codable, Hashable {
{% for variable in type.storedVariables|!annotated:"skipMutationRequest" %}
    public var {{ variable.name }}: {{ variable.typeName }}?
{% endfor %}

    public init(
    {% for variable in type.storedVariables|!annotated:"skipMutationRequest" %}
        {{ variable.name }}: {{ variable.typeName }}? = nil{% if not forloop.last %}, {% endif %}
    {% endfor %}
    ) {
    {% for variable in type.storedVariables|!annotated:"skipMutationRequest" %}
        self.{{ variable.name }} = {{ variable.name }}
    {% endfor %}
    }

    public init(keyAndValues: [String: Any]) {
    {% for variable in type.storedVariables|!annotated:"skipMutationRequest" %}
        if let {{ variable.name }} = keyAndValues["{{ variable.name }}"] as? {{ variable.typeName }} {
            self.{{ variable.name }} = {{ variable.name }}
        } 
    {% endfor %}
    }

    public static func empty() -> Self { Self() }

    public mutating func merge(from other: Self) {
    {% for variable in type.storedVariables|!annotated:"skipMutationRequest" %}
        if let updatedValue = other.{{ variable.name }} {
            self.{{ variable.name }} = updatedValue
        }
    {% endfor %}
    } 
}

// MARK: DTO

public struct {{ type.name|replace:"Template","DTO" }}: {{ type.name|replace:"Template","Properties" }}, Codable, Hashable, APIResponseItem {
{% for variable in type.storedVariables %}
    public let {{ variable.name }}: {{ variable.typeName }}   
{% endfor %}

    public init(
    {% for variable in type.storedVariables %}
        {{ variable.name }}: {{ variable.typeName }}{% if not forloop.last %}, {% endif %}
    {% endfor %}
    ) {
    {% for variable in type.storedVariables %}
        self.{{ variable.name }} = {{ variable.name }}
    {% endfor %}
    }

    public init?(partial: Partial{{ type.name|replace:"Template","DTO" }}) {
        guard
        {% for variable in type.storedVariables %}
        {% if variable|!annotated:"requiredInPartialDTO" %}
            let {{ variable.name }} = partial.{{ variable.name }}{% if not forloop.last %}, {% endif %}
        {% endif %}
        {% endfor %}
        else {
            return nil 
        }

    {% for variable in type.storedVariables %}
        {% if variable|annotated:"requiredInPartialDTO" %}
            self.{{ variable.name }} = partial.{{ variable.name }}
        {% else %}
            self.{{ variable.name }} = {{ variable.name }}
        {% endif %}
    {% endfor %}
    }

    public init(
        _ creationRequest: {{ type.name|replace:"Template","CreationRequest"|replace:"Details","" }},
        {% for variable in type.storedVariables|annotated:"skipCreationRequest" %}
        {{ variable.name }}: {{ variable.typeName }}{% if not forloop.last %}, {% endif %}
        {% endfor %}
    ) {
    {% for variable in type.storedVariables %}
    {% if variable|annotated:"skipCreationRequest" %}
        self.{{ variable.name }} = {{ variable.name }}
    {% else %}
        self.{{ variable.name }} = creationRequest.{{ variable.name }}
    {% endif %}
    {% endfor %}
    }
}

// MARK: PartialDTO

public struct Partial{{ type.name|replace:"Template","DTO" }}: {{ type.name|replace:"Template","PartialProperties" }}, Codable, Hashable, APIResponseItem {
{% for variable in type.storedVariables %}
    public let {{ variable.name }}: {{ variable.typeName }}{% if variable|!annotated:"requiredInPartialDTO" %}?{% endif %}
{% endfor %}

    public init(
    {% for variable in type.storedVariables %}
        {{ variable.name }}: {{ variable.typeName }}{% if variable|!annotated:"requiredInPartialDTO" %}? = nil{% endif %}{% if not forloop.last %}, {% endif %}
    {% endfor %}
    ) {
    {% for variable in type.storedVariables %}
        self.{{ variable.name }} = {{ variable.name }}
    {% endfor %}
    }

    public init(
        _ other: {{ type.name|replace:"Template","MutationRequest" }},
        {% for variable in type.storedVariables|annotated:"skipMutationRequest" %}
        {{ variable.name }}: {{ variable.typeName }}{% if not forloop.last %}, {% endif %}
        {% endfor %}
    ) {
    {% for variable in type.storedVariables %}
        self.{{ variable.name }} = {% if variable|!annotated:"skipMutationRequest" %}other.{% endif %}{{ variable.name }}
    {% endfor %}
    }

    {#
    public mutating func merge(from other: Self) {
        self = Self(
            {% for variable in type.storedVariables %}
            {{ variable.name }}: other.{{ variable.name }}{% if variable|!annotated:"requiredInPartialDTO" %} ?? {{ variable.name }}{% endif %}{% if not forloop.last %}, {% endif %}
            {% endfor %}
        )
    }
    #}
}
{% endfor %}